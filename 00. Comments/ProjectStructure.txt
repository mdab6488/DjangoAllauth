DjangoAllauth/                         # Root directory for the full-stack project combining Django and Next.js
├── backend/                           # Django Backend: Core server-side logic and API
│   ├── AuthenticationApp/             # Custom Django app dedicated to user authentication functionality
│   │   ├── migrations/                # Directory for database migration files to manage schema changes
│   │   │   ├── __init__.py            # Marks migrations as a Python package
│   │   ├── __init__.py                # Marks AuthenticationApp as a Python package
│   │   ├── admin.py                   # Configures how models appear in the Django admin interface
│   │   ├── apps.py                    # Defines the app configuration, including its name and behavior
│   │   ├── models.py                  # Defines database models (e.g., custom user or profile models)
│   │   ├── permissions.py             # Custom permission classes for fine-grained access control
│   │   ├── serializers.py             # Converts model instances to JSON for API responses
│   │   ├── signals.py                 # Handles signals (e.g., post-save actions for user creation)
│   │   ├── throttling.py              # Implements rate limiting to prevent API abuse
│   │   ├── urls.py                    # Defines URL patterns specific to this app
│   │   ├── views.py                   # Contains API views and logic for handling requests
│   ├── config/                        # Project-wide configuration files for Django
│   │   ├── __init__.py                # Marks config as a Python package
│   │   ├── asgi.py                    # ASGI entry point for asynchronous server deployment
│   │   ├── settings.py                # Core Django settings (e.g., database, middleware, allauth config)
│   │   ├── urls.py                    # Root URL configuration, mapping routes to apps
│   │   ├── wsgi.py                    # WSGI entry point for traditional server deployment
│   ├── env/                           # Stores environment-specific files (e.g., local .env)
│   ├── media/                         # Directory for user-uploaded files (e.g., profile pictures)
│   ├── staticfiles/                   # Collected static files for production deployment
│   ├── .dockerignore                  # Specifies files to exclude from Docker builds (e.g., .git)
│   ├── Dockerfile                     # Defines the Docker image for the Django backend
│   ├── entrypoint.sh                  # Script executed when the Django container starts
│   ├── manage.py                      # Django CLI script for managing the project
│   ├── requirements.txt               # Lists Python dependencies (e.g., Django, djangorestframework)
│
├── frontend/                          # Next.js Frontend: Modern UI with TypeScript
│   ├── .husky/                        # Directory for Husky Git hooks (e.g., pre-commit linting)
│   ├── .next/                         # Auto-generated build output for Next.js (not in version control)
│   ├── .vscode                        
│   │   ├── extensions.json                  
│   │   ├── settings.json                  
│   ├── .yarn/                         # Yarn cache and plugins for dependency management
│   │   ├── cache/                  
│   │   ├── releases/                  # Next.js app directory using the App Router
│   │   │   ├── yarn-4.6.0.cjs
│   │   ├── sdks/                  
│   │   ├── unplugged/                  
│   │   ├── install-state.gz                  
│   ├── public/                        # Static assets accessible directly (e.g., favicon, images)
│   ├── src/                           # Source code directory for the frontend application
│   │   ├── app/                       # Next.js app directory using the App Router
│   │   │   ├── api/                   # API route handlers for server-side logic
│   │   │   │   ├── [...path]/        # Catch-all dynamic route for proxying requests
│   │   │   │   │   ├── route.ts      # Proxy handler forwarding requests to Django API
│   │   │   ├── login/                # Directory for the login page
│   │   │   │   ├── page.tsx          # UI component rendering the login page
│   │   │   ├── signup/               # Directory for the signup page
│   │   │   │   ├── page.tsx          # UI component rendering the signup page
│   │   │   ├── ClientLayout.tsx      # Client-side layout component for dynamic rendering
│   │   │   ├── favicon.ico           # Favicon file for the app (usually in public/, duplicated here)
│   │   │   ├── layout.tsx            # Root layout component wrapping all pages
│   │   │   ├── page.tsx              # Default page component (e.g., homepage)
│   │   │   ├── ServerLayout.tsx      # Server-side layout component for SSR
│   │   ├── components/               # Reusable React components for the UI
│   │   │   ├── auth/                 # Authentication-specific components
│   │   │   │   ├── LoginForm.tsx     # Form component for user login
│   │   │   │   ├── SignupForm.tsx    # Form component for user signup
│   │   │   ├── Layout/               # Components for structural layouts
│   │   │   │   ├── Footer.tsx        # Footer component for all pages
│   │   │   │   ├── Header.tsx        # Header component for all pages
│   │   │   │   ├── index.tsx         # Exports layout components for easy import
│   │   │   ├── ui/                   # Utility UI components for reusability
│   │   │   │   ├── ErrorFallback.tsx # Fallback UI for error boundaries
│   │   │   │   ├── Loading.tsx       # Loading spinner or placeholder component
│   │   │   │   ├── ThemeProvider.tsx # Provides theming context (e.g., light/dark mode)
│   │   ├── hooks/                    # Custom React hooks for logic encapsulation
│   │   │   ├── useApi.ts             # Hook for making API requests to the backend
│   │   │   ├── useAuth.ts            # Hook for managing authentication state
│   │   │   ├── useForm.ts            # Hook for form handling and validation
│   │   │   ├── useLocalStorage.ts    # Hook for interacting with browser local storage
│   │   ├── services/                 # Service layer for API interactions
│   │   │   ├── api.ts                # Configures the API client (e.g., Axios setup)
│   │   │   ├── auth.ts               # Authentication-related API calls
│   │   ├── styles/                   # Styling files for consistent design
│   │   │   ├── globals.css           # Global CSS styles applied across the app
│   │   │   ├── page.module.css       # CSS modules for scoped page styles
│   │   │   ├── theme.ts              # Defines theme variables (e.g., colors, fonts)
│   │   ├── types/                    # TypeScript type definitions for type safety
│   │   │   ├── index.ts              # Central export file for all custom types
│   │   ├── utils/                    # General utility functions
│   │   │   ├── createEmotionCache.ts # Sets up Emotion cache for SSR styling
│   ├── .dockerignore                 # Specifies files to exclude from Docker builds
│   ├── .editorconfig                 # Ensures consistent code formatting across editors
│   ├── .eslintrc.json                # ESLint configuration for linting JavaScript/TypeScript
│   ├── .gitattributes                # Git attributes for handling line endings
│   ├── .gitignore                    # Lists files and directories to ignore in Git
│   ├── .pnp.cjs                      # Yarn Plug'n'Play configuration file
│   ├── .pnp.loader.mjs               # Yarn Plug'n'Play loader for modules
│   ├── .prettierrc                   # Prettier configuration for code formatting
│   ├── .yarnrc.yml                   # Yarn configuration for package management
│   ├── Dockerfile                    # Defines the Docker image for the frontend
│   ├── eslint.config.mjs             # Modern ESLint configuration (alternative to .eslintrc.json)
│   ├── jest.config.ts                # 
│   ├── jest.setup.ts                 # Setup file for Jest testing framework
│   ├── next.config.ts                # Configuration for Next.js (e.g., rewrites, webpack)
│   ├── package.json                  # Lists Node.js dependencies and scripts
│   ├── README.md                     # Frontend-specific documentation
│   ├── tsconfig.json                 # TypeScript configuration for the frontend
│   ├── yarn.lock                     # Lockfile ensuring consistent dependency versions
│
├── nginx/                            # Nginx setup for serving frontend and proxying backend
│   ├── conf.d/                       # Directory for Nginx configuration files
│   │   ├── default.conf              # Default server block for routing traffic
│
├── .env                              # Stores environment variables for the entire stack
├── .gitignore                        # Root-level Git ignore file for the project
├── docker-compose.yml                # Orchestrates Docker services (backend, frontend, nginx)
├── README.md                         # Main project documentation
├── wait-for-it.sh                    # Utility script to delay service startup until dependencies are ready