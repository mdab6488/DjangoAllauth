docker-compose up --build -d
docker-compose up -d

-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build postgres
docker-compose up -d --no-deps postgres

docker-compose exec postgres ls -l /proc/self/fd
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose up -d --no-deps redis

chown -R 1000:1000 redis_data
chmod -R 770 redis_data

docker-compose exec redis ls -la /data
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose up -d --no-deps pgadmin
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build --no-cache backend
docker-compose up -d --no-deps backend

docker-compose exec backend python manage.py makemigrations
docker-compose exec backend python manage.py migrate
docker exec DjangoAllauth_backend python manage.py shell -c \
"from django.contrib.sites.models import Site; Site.objects.create(domain='localhost', name='localhost')"

docker exec -it DjangoAllauth_backend bash
python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); print(User.objects.filter(is_superuser=True).values('username', 'email', 'password'))"

python manage.py changepassword admin

python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); user = User.objects.get(username='admin'); user.set_password('admin'); user.save()"
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build celery-worker
docker-compose up -d --no-deps celery-worker
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose up -d --no-deps flower
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build frontend
docker-compose up -d --no-deps frontend
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build --no-cache certbot
docker-compose up -d --no-deps certbot
-----------------------------------------------------------------------------------------------------------------------------------
docker-compose build --no-cache nginx
docker-compose up -d --no-deps nginx
===================================================================================================================================
docker-compose down
docker-compose down -v

--no-cache

docker logs DjangoAllauth_postgres
docker-compose exec backend env
docker-compose exec nginx printenv FRONTEND_HOST

docker-compose logs -f
===================================================================================================================================
docker network ls
docker network inspect DjangoAllauth_network
ping postgres
        'HOST': 'DjangoAllauth_postgres',  # Change from 'postgres' to the actual container name
POSTGRES_HOST=DjangoAllauth_postgres

ðŸ›  Why This Happens?
    When using Docker, containers communicate via service names (not localhost or 127.0.0.1).
    Your PostgreSQL container name is DjangoAllauth_postgres, so Django must use this exact name as the database host.
    Running ping postgres fails because thereâ€™s no container with that name.
===================================================================================================================================

docker exec -it DjangoAllauth_postgres psql -U auth_user -c "\du"
docker exec -it f0e426f8e957 psql -U postgres -d djangoallauth_db -c "DROP ROLE postgres;"

docker exec -it 441c975c0942 psql -U auth_user -c "\l"


docker exec -it 645f241325fe psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "CREATE ROLE postgres WITH SUPERUSER LOGIN PASSWORD 'postgres';"


wHY I NEED tO SEt auth_user  AS MY database named

docker exec -it DjangoAllauth_postgres psql -U auth_user

===================================================================================================================================
docker exec -it DjangoAllauth_postgres python manage.py makemigrations
docker exec -it DjangoAllauth_postgres python manage.py migrate

docker exec -it DjangoAllauth_postgres python manage.py makemigrations AuthenticationApp
docker exec -it DjangoAllauth_postgres python manage.py migrate


docker exec -it DjangoAllauth_postgres psql -U djangoallauth_db -c "\l"


===================================================================================================================================
docker exec -it DjangoAllauth_nginx ls -la /etc/nginx/
docker exec -it DjangoAllauth_nginx ls -la /etc/nginx/ssl
===================================================================================================================================

docker exec -it DjangoAllauth_nginx ls -ld /var/cache/nginx
# Should show ownership by nginxuser:nginxgroup

docker exec -it DjangoAllauth_nginx ps aux
# Nginx master and worker processes should show running as nginxuser


===================================================================================================================================
curl -v http://localhost:8000/healthcheck/