docker-compose up --build -d
docker-compose up -d

docker-compose build --no-cache postgres
docker-compose up -d --no-deps postgres

docker-compose build --no-cache nginx
docker-compose up -d --no-deps nginx

docker-compose build --no-cache backend
docker-compose up -d --no-deps backend

docker-compose build --no-cache frontend
docker-compose up -d --no-deps frontend
===================================================================================================================================
docker-compose down
docker-compose down -v

docker logs DjangoAllauth_postgres
docker-compose exec backend env
docker-compose exec postgres printenv POSTGRES_HOST

docker-compose logs -f
===================================================================================================================================
docker network ls
docker network inspect DjangoAllauth_network
ping postgres
        'HOST': 'DjangoAllauth_postgres',  # Change from 'postgres' to the actual container name
POSTGRES_HOST=DjangoAllauth_postgres

ðŸ›  Why This Happens?
    When using Docker, containers communicate via service names (not localhost or 127.0.0.1).
    Your PostgreSQL container name is DjangoAllauth_postgres, so Django must use this exact name as the database host.
    Running ping postgres fails because thereâ€™s no container with that name.
===================================================================================================================================





