openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./nginx/ssl/nginx.key -out ./nginx/ssl/nginx.crt

openssl dhparam -out ./nginx/ssl/dhparam.pem 2048
chmod 600 ./nginx/ssl/dhparam.pem

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./nginx/ssl/privkey.pem -out ./nginx/ssl/fullchain.pem
chmod 600 ./nginx/ssl/privkey.pem
chmod 600 ./nginx/ssl/fullchain.pem

apt update
apt install certbot python3-certbot-nginx

====================================================
# Generate private key
openssl genrsa -out nginx-selfsigned.key 2048

# Generate CSR (Certificate Signing Request)
openssl req -new -key nginx-selfsigned.key -out nginx-selfsigned.csr -subj "//CN=localhost"

# Generate self-signed certificate
openssl x509 -req -days 365 -in nginx-selfsigned.csr -signkey nginx-selfsigned.key -out nginx-selfsigned.crt

# Generate DH parameters
openssl dhparam -out dhparam.pem 


====================================================
For Production (Trusted Certificates):
Replace self-signed certificates with Let's Encrypt certificates (via Certbot).

Modify your Nginx config to work with Certbot:

nginx
Copy
# In your default.conf
server {
  listen 80;
  server_name yourdomain.com;
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }
  location / {
    return 301 https://$host$request_uri;
  }
}
Use a Docker Certbot setup to automate renewal.



====================================================
5. Trust the Certificate (Mac & Windows)
Mac: Import local.crt into Keychain Access and mark it as trusted.
Windows: Import local.crt into the Trusted Root Certification Authorities store.

Mac (Using Keychain Access)
Open Keychain Access (Cmd + Space → type Keychain Access).
In the top-left corner, select "System" from the left sidebar.
Click on File → Import Items…, then select local.crt from your ./nginx/ssl/ folder.
After importing, find localhost (or the certificate name).
Double-click it and expand Trust.
Set "When using this certificate" to "Always Trust".
Close the window (it will ask for your password to confirm).
Restart your browser.
✅ Now you can access https://localhost without SSL warnings.

Windows (Using Certificate Manager)
Press Win + R, type mmc, and press Enter.
Click File → Add/Remove Snap-in.
Select Certificates and click Add.
Choose Computer Account → Next → Local Computer → Finish → OK.
Navigate to Trusted Root Certification Authorities → Certificates.
Right-click and choose All Tasks → Import.
Click Next, then Browse and select local.crt from your ./nginx/ssl/ folder.
Click Next, ensure it's placed in Trusted Root Certification Authorities, then click Finish.
Restart your browser.
✅ Now your browser should trust https://localhost without warnings.:



# Project Name

## Running the Project

1. Install Docker and Docker Compose
2. Clone this repository
3. Run `docker-compose up`
4. Access the application at https://localhost

### First-time Certificate Warning

When you first access the site, your browser will show a warning about the certificate. This is expected because we're using a self-signed certificate for local development.

To proceed:
- In Chrome/Edge: Click "Advanced" and then "Proceed to localhost (unsafe)"
- In Firefox: Click "Advanced" > "Accept the Risk and Continue"

This warning only appears because we're using a locally-generated certificate for development purposes.