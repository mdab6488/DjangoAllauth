x-env-config: &env-config
  env_file:
    - ${ENV_FILE:-.env}

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        memory: 128M

x-logging: &logging-config
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL

services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: DjangoAllauth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "127.0.0.1:${POSTGRES_PORT}:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      DjangoAllauth_network:
        aliases:
          - database
          - postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    container_name: DjangoAllauth_backend
    restart: unless-stopped
    volumes:
      - ${DEVELOPMENT_MODE:+./backend:/app} # Mount volume only in development mode
      - static_volume:/app/collected_static
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "127.0.0.1:${BACKEND_PORT}:8000" # Use BACKEND_PORT from .env or default to 8000, bind to localhost only
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CORS_ORIGIN_WHITELIST=${CORS_ORIGIN_WHITELIST}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_DIR=/app/logs
      - COLLECT_STATIC=true
      - CHECK_APP_HEALTH=true
    networks:
      DjangoAllauth_network:
        aliases:
          - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        mkdir -p /app/logs &&
        /usr/local/bin/wait-for-it.sh postgres:${POSTGRES_PORT} --timeout=40 --strict &&
        python manage.py migrate &&
        exec python manage.py runserver 0.0.0.0:8000"
    <<: [*resource-limits, *logging-config, *env-config]

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
      target: ${NODE_ENV:-development}
    container_name: DjangoAllauth_frontend
    restart: unless-stopped
    volumes:
      - ${DEVELOPMENT_MODE:+./frontend:/app}  # Only mount in development mode
      - node_modules:/app/node_modules
      - next_cache:/app/.next
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost for security
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - CHOKIDAR_USEPOLLING=${DEVELOPMENT_MODE:+true}
      - WATCHPACK_POLLING=${DEVELOPMENT_MODE:+true}
    networks:
      - DjangoAllauth_network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend
    <<: [*resource-limits, *logging-config, *env-config, *security-opts]

  nginx:
    build:
      context: ./nginx 
      dockerfile: Dockerfile
    container_name: DjangoAllauth_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs_volume:/var/log/nginx
    entrypoint: ["/bin/sh", "-c"]
    environment:
      - BACKEND_HOST=backend
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_HOST=frontend
      - FRONTEND_PORT=${FRONTEND_PORT}
    command:
      - |
        if [ ! -f /etc/nginx/ssl/nginx-selfsigned.crt ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/ssl/nginx-selfsigned.key \
            -out /etc/nginx/ssl/nginx-selfsigned.crt \
            -subj "/CN=localhost";
        fi
        exec nginx -g "daemon off;"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: [*resource-limits, *logging-config, *security-opts]

networks:
  DjangoAllauth_network:
    driver: bridge
    name: DjangoAllauth_network
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

volumes:
  postgres_data:
    name: DjangoAllauth_postgres_data
  static_volume:
    name: DjangoAllauth_static_volume
  media_volume:
    name: DjangoAllauth_media_volume
  node_modules:
    name: DjangoAllauth_node_modules
  next_cache:
    name: DjangoAllauth_next_cache
  logs_volume:
    name: DjangoAllauth_log_volume
  nginx_logs_volume:
    name: DjangoAllauth_nginx_logs_volume
