# Reusable configuration fragments
x-env-config: &env-config
  env_file:
    - ${ENV_FILE:-.env}

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        memory: 128M

x-logging: &logging-config
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  postgres:
    image: postgres:17-alpine
    container_name: DjangoAllauth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s
    <<: [*resource-limits, *logging-config]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-production}
    container_name: DjangoAllauth_backend
    restart: unless-stopped
    volumes:
      - ${DEVELOPMENT_MODE:+./backend:/app}
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CORS_ORIGIN_WHITELIST=${CORS_ORIGIN_WHITELIST}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-core.settings}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck/"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s
    command: >
      sh -c "/usr/local/bin/wait-for-it.sh postgres:5432 -- 
             python manage.py migrate --noinput &&
             python manage.py create_superuser &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers ${GUNICORN_WORKERS:-3} --threads ${GUNICORN_THREADS:-2} config.wsgi:application"
    <<: [*resource-limits, *logging-config, *env-config]

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: DjangoAllauth_frontend
    restart: unless-stopped
    volumes:
      - ${DEVELOPMENT_MODE:+./frontend:/app}
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s
    depends_on:
      backend:
        condition: service_healthy
    <<: [*resource-limits, *logging-config, *env-config]

  nginx:
    image: nginx:stable-alpine
    container_name: DjangoAllauth_nginx
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/healthcheck"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [*resource-limits, *logging-config]

networks:
  DjangoAllauth_network:
    driver: bridge
    name: DjangoAllauth_network
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    name: DjangoAllauth_postgres_data
  static_volume:
    name: DjangoAllauth_static_volume
  media_volume:
    name: DjangoAllauth_media_volume