x-env-config: &env-config
  env_file:
    - ${ENV_FILE:-.env}

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        memory: 128M

x-logging: &logging-config
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETGID
    - SETUID
    - DAC_OVERRIDE
    - NET_BIND_SERVICE

services:
  # ========================
  # Independent Services (No Dependencies)
  # ========================
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: DjangoAllauth_postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      DjangoAllauth_network:
        aliases:
          - database
          - postgres
    user: "999:999"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]
    
  redis:
    image: redis:alpine
    container_name: DjangoAllauth_redis
    command: 
      - redis-server
      - "--save"
      - "60"
      - "1"
      - "--stop-writes-on-bgsave-error"
      - "no"  # Allow writes even if persistence fails
      - "--appendonly"
      - "yes"  # Enable AOF persistence
    volumes:
      - redis_data:/data
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping | grep -q PONG"]
      interval: 15s
      timeout: 5s
      retries: 5
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]
  # ========================
  # Database-Dependent Services
  # Admin services
  # ========================
  pgadmin:
    image: dpage/pgadmin4
    container_name: DjangoAllauth_pgadmin
    ports:
      - "5050:80"
    networks:
      - DjangoAllauth_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_add:
      - SETGID
      - SETUID
    <<: [*resource-limits, *logging-config, *env-config]  # Remove *security-opts
  # ========================
  # Core Application Services
  # ========================
  # Application services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    container_name: DjangoAllauth_backend
    restart: unless-stopped
    volumes:
      - ./backend:/app # Mount volume only in development mode
      - static_volume:/app/collected_static
      - media_volume:/app/media
      - logs_volume:/app/logs
      - ./backend/templates:/app/templates
    ports:
      - "${BACKEND_PORT}:8000" # Use BACKEND_PORT from .env or default to 8000, bind to localhost only
    networks:
      DjangoAllauth_network:
        aliases:
          - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: ["/app/entrypoint.sh"]
    security_opt:
      - no-new-privileges:true  # Keep this security measure
    cap_add:  # Add minimal required capabilities
      - SETPCAP
      - CHOWN
    command: ["gunicorn", "--timeout=120", "-b", "0.0.0.0:8000", "core.wsgi:application"] 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Give more time for startup
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: DjangoAllauth__celery_worker
    command: ["celery", "-A", "core", "worker", "--loglevel=info"]
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A core inspect ping -d celery@$$HOSTNAME | grep OK || exit 1"]
      interval: 20s
      timeout: 15s
      retries: 5
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]

  flower:
    image: mher/flower
    container_name: DjangoAllauth_flower
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]
    ports:
      - "5555:5555"
    networks:
      - DjangoAllauth_network
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]

  # ========================
  # Frontend & Proxy
  # Frontend services (depends on backend)
  # ========================
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV}
      target: ${NODE_ENV:-development}
    container_name: DjangoAllauth_frontend
    restart: unless-stopped
    volumes:
      - ${DEVELOPMENT_MODE:+./frontend:/app}  # Only mount in development mode
      - node_modules:/app/node_modules
      - next_cache:/app/.next
    ports:
      - "3000:3000"  # Only bind to localhost for security
    networks:
      - DjangoAllauth_network
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      backend:
        condition: service_healthy
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]

  # Web server
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: DjangoAllauth_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:rw
      - ./nginx/ssl:/etc/nginx/ssl:rw
    user: "102:102"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - DjangoAllauth_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost/healthcheck/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: [*resource-limits, *logging-config, *security-opts, *env-config]

networks:
  DjangoAllauth_network:
    driver: bridge
    name: DjangoAllauth_network
    ipam:
      config:
        - subnet: 172.28.0.0/24  # Smaller subnet
          gateway: 172.28.0.1

volumes:
  postgres_data:
    name: DjangoAllauth_postgres_data
  static_volume:
    name: DjangoAllauth_static_volume
  media_volume:
    name: DjangoAllauth_media_volume
  node_modules:
    name: DjangoAllauth_node_modules
  next_cache:
    name: DjangoAllauth_next_cache
  logs_volume:
    name: DjangoAllauth_log_volume
  nginx_logs_volume:
    name: DjangoAllauth_nginx_logs_volume
  redis_data:
    name: DjangoAllauth_redis_data